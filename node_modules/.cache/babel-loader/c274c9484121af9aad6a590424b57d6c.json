{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport API from '../API';\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \"\") => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }; //Initial render\n\n\n  useEffect(() => {\n    fetchMovies(1);\n  }, []);\n  return {\n    state: state,\n    loading: loading,\n    error: error\n  };\n};\n\n_s(useHomeFetch, \"KZgOLoECbee4UfZq/rbGpTsqoEw=\");","map":{"version":3,"sources":["/Users/sienna/Desktop/CS/__PORTFOLIO__/Project8_Movist/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","useRef","API","initialState","page","results","total_pages","total_results","useHomeFetch","state","setState","loading","setLoading","error","setError","fetchMovies","searchTerm","movies","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,CADW;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAGjBC,EAAAA,WAAW,EAAE,CAHI;AAIjBC,EAAAA,aAAa,EAAE;AAJE,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACI,YAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMgB,WAAW,GAAG,OAAOX,IAAP,EAAaY,UAAU,GAAG,EAA1B,KAAiC;AACjD,QAAI;AACAF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMK,MAAM,GAAG,MAAMf,GAAG,CAACa,WAAJ,CAAgBC,UAAhB,EAA4BZ,IAA5B,CAArB;AAEAM,MAAAA,QAAQ,CAACQ,IAAI,KAAK,EACd,GAAGD,MADW;AAEdZ,QAAAA,OAAO,EACHD,IAAI,GAAG,CAAP,GAAW,CAAC,GAAGc,IAAI,CAACb,OAAT,EAAkB,GAAGY,MAAM,CAACZ,OAA5B,CAAX,GAAkD,CAAC,GAAGY,MAAM,CAACZ,OAAX;AAHxC,OAAL,CAAL,CAAR;AAKH,KAXD,CAWE,OAAMQ,KAAN,EAAa;AACXC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAhBD,CAL8B,CAsB9B;;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,WAAW,CAAC,CAAD,CAAX;AACH,GAFQ,EAEN,EAFM,CAAT;AAKA,SAAO;AAAEN,IAAAA,KAAK,EAAEA,KAAT;AAAgBE,IAAAA,OAAO,EAAEA,OAAzB;AAAkCE,IAAAA,KAAK,EAAEA;AAAzC,GAAP;AACH,CA7BM;;GAAML,Y","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nimport API from '../API';\n\nconst initialState = {\n    page: 0,\n    results: [],\n    total_pages: 0,\n    total_results: 0\n}\n\nexport const useHomeFetch = () => {\n    const [state, setState] = useState(initialState);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    const fetchMovies = async (page, searchTerm = \"\") => {\n        try {\n            setError(false);\n            setLoading(true);\n            \n            const movies = await API.fetchMovies(searchTerm, page);\n\n            setState(prev => ({\n                ...movies, \n                results: \n                    page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n            }))\n        } catch(error) {\n            setError(true);\n        }\n        setLoading(false);\n    }\n    //Initial render\n    useEffect(() => {\n        fetchMovies(1)\n    }, [])\n\n\n    return { state: state, loading: loading, error: error};\n}\n"]},"metadata":{},"sourceType":"module"}